# Generated by Django 2.2 on 2019-06-13 02:14

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import smart_selects.db_fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Categoria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=150)),
            ],
            options={
                'verbose_name': 'Categoría de Productos',
                'verbose_name_plural': 'Categorías de Productos',
            },
        ),
        migrations.CreateModel(
            name='Localidad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('localidad', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Localidades',
                'ordering': ['provincia'],
            },
        ),
        migrations.CreateModel(
            name='Provincia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provincia', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['provincia'],
            },
        ),
        migrations.CreateModel(
            name='Proveedor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('razon', models.CharField(max_length=200)),
                ('cuit', models.CharField(max_length=13, validators=[django.core.validators.RegexValidator('^[0-9]{2}-[0-9]{8}-[0-9]$', 'El número ingresado es incorrecto', 'Número incorrecto')])),
                ('telefono', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator('^(?:(?:00)?549?)?0?(?:11|[2368]\\d)(?:(?=\\d{0,2}15)\\d{2})??\\d{8}$', 'El número ingresado es incorrecto', 'Número incorrecto')])),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='e-mail')),
                ('domicilio', models.CharField(max_length=50)),
                ('contacto', models.CharField(blank=True, max_length=100)),
                ('activo', models.BooleanField(default=True)),
                ('localidad', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, chained_field='provincia', chained_model_field='provincia', on_delete=django.db.models.deletion.CASCADE, to='administrador.Localidad')),
                ('provincia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrador.Provincia')),
            ],
            options={
                'verbose_name_plural': 'Proveedores',
            },
        ),
        migrations.CreateModel(
            name='Producto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=200)),
                ('descripcion', models.CharField(blank=True, max_length=1000)),
                ('stockMin', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='stock mínimo')),
                ('stockMax', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='stock máximo')),
                ('stockAct', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='stock disponible')),
                ('imagen', models.ImageField(upload_to='./static')),
                ('categoria', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='administrador.Categoria', verbose_name='categoría del producto')),
            ],
        ),
        migrations.AddField(
            model_name='localidad',
            name='provincia',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrador.Provincia'),
        ),
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('razon', models.CharField(max_length=200)),
                ('cuit', models.CharField(max_length=13, validators=[django.core.validators.RegexValidator('^[0-9]{2}-[0-9]{8}-[0-9]$', 'El número ingresado es incorrecto', 'Número incorrecto')])),
                ('telefono', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator('^(?:(?:00)?549?)?0?(?:11|[2368]\\d)(?:(?=\\d{0,2}15)\\d{2})??\\d{8}$', 'El número ingresado es incorrecto', 'Número incorrecto')])),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='e-mail')),
                ('domicilio', models.CharField(max_length=50)),
                ('contacto', models.CharField(blank=True, max_length=100)),
                ('activo', models.BooleanField(default=True)),
                ('localidad', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, chained_field='provincia', chained_model_field='provincia', on_delete=django.db.models.deletion.CASCADE, to='administrador.Localidad')),
                ('provincia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrador.Provincia')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('cuil', models.CharField(max_length=13, validators=[django.core.validators.RegexValidator('^[0-9]{2}-[0-9]{8}-[0-9]$', 'El número ingresado es incorrecto', 'Número incorrecto')])),
                ('telefono', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator('^(?:(?:00)?549?)?0?(?:11|[2368]\\d)(?:(?=\\d{0,2}15)\\d{2})??\\d{8}$', 'El número ingresado es incorrecto', 'Número incorrecto')])),
                ('domicilio', models.CharField(max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('localidad', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, chained_field='provincia', chained_model_field='provincia', on_delete=django.db.models.deletion.CASCADE, to='administrador.Localidad')),
                ('provincia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrador.Provincia')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Empleado',
                'verbose_name_plural': 'Empleados',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
